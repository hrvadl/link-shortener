// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/hrvadl/link-shortener/internal/domain/link (interfaces: LinksSource)
//
// Generated by this command:
//
//	mockgen -destination=./mocks/mock_source.go -package=mocks . LinksSource
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockLinksSource is a mock of LinksSource interface.
type MockLinksSource struct {
	ctrl     *gomock.Controller
	recorder *MockLinksSourceMockRecorder
}

// MockLinksSourceMockRecorder is the mock recorder for MockLinksSource.
type MockLinksSourceMockRecorder struct {
	mock *MockLinksSource
}

// NewMockLinksSource creates a new mock instance.
func NewMockLinksSource(ctrl *gomock.Controller) *MockLinksSource {
	mock := &MockLinksSource{ctrl: ctrl}
	mock.recorder = &MockLinksSourceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLinksSource) EXPECT() *MockLinksSourceMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockLinksSource) Get(arg0 context.Context, arg1 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockLinksSourceMockRecorder) Get(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockLinksSource)(nil).Get), arg0, arg1)
}

// Set mocks base method.
func (m *MockLinksSource) Set(arg0 context.Context, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Set indicates an expected call of Set.
func (mr *MockLinksSourceMockRecorder) Set(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockLinksSource)(nil).Set), arg0, arg1, arg2)
}
